# World Life Expectancy Project -- Data Cleaning

SELECT *
FROM world_life_expectancy
;

-- fniding duplicates
-- CONCAT Country and Year column. There should only be a count of 1 for each Country, Year
-- filtering on the AGG() uses the HAVING clause


SELECT Country, Year, CONCAT(Country, Year), COUNT(CONCAT(Country, Year))
FROM world_life_expectancy
GROUP BY Country, Year, CONCAT(Country, Year)
HAVING COUNT(CONCAT(Country, Year)) > 1
;

-- remove duplicates
-- must identify row id for each duplicate then remove them
-- give each duplicate a row_ID and 
-- use a row number based off of CONCAT(Country, Year)
-- get a row number partitioned based on  CONCAT(Country, Year)
-- ORDER BY CONCAT(Country, Year)

SELECT Row_ID,
CONCAT(Country, Year),
ROW_NUMBER() OVER(PARTITION BY CONCAT(Country, Year) ORDER BY CONCAT(Country, Year)) AS Row_Num
FROM world_life_expectancy
;


-- Use the above query as a subquery to filter for Row_Num > 1
-- show the Row_ID of the duplicate rows

SELECT *
FROM (
	SELECT Row_ID,
	CONCAT(Country, Year),
	ROW_NUMBER() OVER(PARTITION BY CONCAT(Country, Year) ORDER BY CONCAT(Country, Year)) AS Row_Num
	FROM world_life_expectancy
    ) AS Row_table
WHERE Row_Num > 1
;

-- Delete Row_IDs
-- deleting the Row_IDs that have a Row_Num that is greater than 1

DELETE FROM world_life_expectancy
WHERE 
	Row_ID IN (
    SELECT Row_ID
FROM (
	SELECT Row_ID,
	CONCAT(Country, Year),
	ROW_NUMBER() OVER(PARTITION BY CONCAT(Country, Year) ORDER BY CONCAT(Country, Year)) AS Row_Num
	FROM world_life_expectancy
    ) AS Row_table
WHERE Row_Num > 1
)
;

-- Duplicates removed

-- how many NULLS or blanks do we have

-- take the status from another year and plug it into the data

SELECT *
FROM world_life_expectancy
WHERE status IS NULL
;

-- checking if the blank statuses have enteries for different years
-- use a DISTINCT statement to check for unique values

SELECT DISTINCT(Status)
FROM world_life_expectancy
WHERE status <> ''
;

 -- Status can either be Developing or Developed
-- show all countries that are Developing
-- change the blank status to Developing when that country is listed as Developing for other years

SELECT DISTINCT(Country)
FROM world_life_expectancy
WHERE Status = 'Developing'
;

-- Updating world_life_expectancy table 
-- setting the Status equal to Developing where the country is in the above list
-- if any countries are blank then Status will be populated with Developing

UPDATE world_life_expectancy
SET STATUS = 'Developing'
WHERE Country IN (SELECT DISTINCT(Country)
				FROM world_life_expectancy
				WHERE Status = 'Developing')
;

-- Above query did not work
-- finding another way to update the data by doing a self-JOIN
-- setting it to 'Developing' where it is blank in t1 but not blank in t2 and the country is the sam


UPDATE world_life_expectancy t1
JOIN world_life_expectancy t2
	ON t1.Country = t2.Country
SET t1.Status = 'Developing'
WHERE t1.Status = ''
AND t2.Status <> ''
AND t2.Status = 'Developing'
;

-- selecting everything where Country = 'Unites States of America'
-- United States of America has status of Developed

SELECT *
FROM world_life_expectancy 
WHERE Country = 'United States of America'
;

-- updating countries Status' to Developed where Status is currently blank but should read Developed

UPDATE world_life_expectancy t1
JOIN world_life_expectancy t2
	ON t1.Country = t2.Country
SET t1.Status = 'Developed'
WHERE t1.Status = ''
AND t2.Status <> ''
AND t2.Status = 'Developed'
;

-- Counties with Status as Developed updated properly
-- populating blank life expectancy by taking the average of the succeeding and the previous year' data


SELECT Country, Year, `Life expectancy`
FROM world_life_expectancy
WHERE `Life expectancy` = ''
;

SELECT t1.Country, t1.Year, t1.`Life expectancy`,
t2.Country, t2.Year, t2.`Life expectancy`,
t3.Country, t3.Year, t3.`Life expectancy`,
(t2.`Life expectancy` + t3.`Life expectancy`)/2
FROM world_life_expectancy t1
JOIN world_life_expectancy t2
	ON t1.Country = t2.Country
    AND t1.Year = t2.Year - 1
JOIN world_life_expectancy t3
	ON t1.Country = t3.Country
    AND t1.Year = t3.Year + 1
WHERE t1.`Life expectancy` = ''
;

-- taking the average of `Life expectancy` from t2,t3 columns, and populate them in t1's `life expectancy` column
-- round to 1 decimal point
SELECT t1.Country, t1.Year, t1.`Life expectancy`,
t2.Country, t2.Year, t2.`Life expectancy`,
t3.Country, t3.Year, t3.`Life expectancy`,
ROUND((t2.`Life expectancy` + t3.`Life expectancy`)/2,1)
FROM world_life_expectancy t1
JOIN world_life_expectancy t2
	ON t1.Country = t2.Country
    AND t1.Year = t2.Year - 1
JOIN world_life_expectancy t3
	ON t1.Country = t3.Country
    AND t1.Year = t3.Year + 1
WHERE t1.`Life expectancy` = ''
;

-- populating the t1 Life expectancy` field with the newly found average where the value is blank

UPDATE world_life_expectancy t1
JOIN world_life_expectancy t2
	ON t1.Country = t2.Country
    AND t1.Year = t2.Year - 1
JOIN world_life_expectancy t3
	ON t1.Country = t3.Country
    AND t1.Year = t3.Year + 1
SET t1.`Life expectancy` = ROUND((t2.`Life expectancy` + t3.`Life expectancy`)/2,1)
WHERE t1.`Life expectancy` = ''
;

-- world_life_expectancy data is clean
-- properly filled in blank data
-- removed duplicate data
